package GUI;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;

/**
 * A command-line test rig to verify the functionality of the DatabaseManager
 * and the database schema setup. This class simulates the core operations
 * required at the end of Day 1.
 * 
 * THIS CLASS WAS GENERATED BY AI TO TEST CURRENT CODE
 */
public class DayOneTest {

    public static void main(String[] args) {
        System.out.println("--- Starting End-of-Day-1 Database Test ---");
        Connection conn = null;

        try {
            // --- STEP 1: Connect to the Database ---
            String dbURL = "jdbc:derby:gymDB;create=true";
            conn = DriverManager.getConnection(dbURL);
            System.out.println("[SUCCESS] Connected to the database.");

            // --- STEP 2: Initialize DatabaseManager and Setup Tables ---
            DatabaseManager dbManager = new DatabaseManager(conn);
            dbManager.setupTables(conn); // This will create tables if they don't exist
            System.out.println("[INFO] Table setup process completed.");

            // --- STEP 3: Test addUser() - Create a new user ---
            System.out.println("\n--- TEST 1: Add a new user ---");
            User newUser = new User();
            newUser.setUsername("testuser_day1");
            newUser.setPassword("securepass123");
            newUser.setName("Testy McTestface");
            newUser.setAge(30);
            newUser.setHeight(180);
            newUser.setWeight(80);

            boolean added = dbManager.addUser(newUser);
            if (added && newUser.getUserID() > 0) {
                System.out.println("[SUCCESS] New user added successfully with ID: " + newUser.getUserID());
            } else {
                System.err.println("[FAILURE] Could not add new user.");
                return; // Stop the test if this fails
            }

            // --- STEP 4: Test addUser() with a duplicate username ---
            System.out.println("\n--- TEST 2: Add a duplicate user (expected to fail) ---");
            boolean duplicateAdded = dbManager.addUser(newUser);
            if (!duplicateAdded) {
                System.out.println("[SUCCESS] Correctly failed to add duplicate user.");
            } else {
                System.err.println("[FAILURE] Allowed a duplicate user to be added.");
            }

            // --- STEP 5: Test getUser() with correct credentials ---
            System.out.println("\n--- TEST 3: Log in with correct credentials ---");
            User loggedInUser = dbManager.getUser("testuser_day1", "securepass123");
            if (loggedInUser != null) {
                System.out.println("[SUCCESS] Successfully logged in as: " + loggedInUser.getName());
            } else {
                System.err.println("[FAILURE] Could not log in with correct credentials.");
            }

            // --- STEP 6: Test getUser() with incorrect credentials ---
            System.out.println("\n--- TEST 4: Log in with incorrect password (expected to fail) ---");
            User failedLoginUser = dbManager.getUser("testuser_day1", "wrongpassword");
            if (failedLoginUser == null) {
                System.out.println("[SUCCESS] Correctly failed to log in with incorrect password.");
            } else {
                System.err.println("[FAILURE] Logged in with an incorrect password.");
            }

            // --- STEP 7: Test updateUser() ---
            System.out.println("\n--- TEST 5: Update user information ---");
            if (loggedInUser != null) {
                loggedInUser.setName("Testy McUpdated");
                loggedInUser.setWeight(82); // User has been working out!
                boolean updated = dbManager.updateUser(loggedInUser);
                if (updated) {
                    System.out.println("[SUCCESS] User information updated in the database.");
                } else {
                    System.err.println("[FAILURE] Failed to update user information.");
                }
            } else {
                System.err.println("[SKIPPED] Cannot test update because login failed.");
            }

            // --- STEP 8: Verify the update by fetching the user again ---
            System.out.println("\n--- TEST 6: Verify the update ---");
            User updatedUser = dbManager.getUser("testuser_day1", "securepass123");
            if (updatedUser != null && updatedUser.getName().equals("Testy McUpdated")
                    && updatedUser.getWeight() == 82) {
                System.out.println("[SUCCESS] Verified user data was updated correctly.");
                System.out.println("New Name: " + updatedUser.getName());
                System.out.println("New Weight: " + updatedUser.getWeight());
            } else {
                System.err.println("[FAILURE] User information was not updated correctly in the database.");
            }

        } catch (SQLException e) {
            System.err.println("A database error occurred during the test.");
            e.printStackTrace();
        } finally {
            // --- FINAL STEP: Close the connection ---
            try {
                if (conn != null && !conn.isClosed()) {
                    conn.close();
                    System.out.println("\n[SUCCESS] Database connection closed.");
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
            System.out.println("\n--- Test Finished ---");
        }
    }
}